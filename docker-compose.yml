# NPM + OPEN-APPSEC + AUTHENTIK

##
## Docker compose file for open-appsec integrated with NGINX Proxy Manager
## with open-appsec management via NGINX Proxy Manager WebUI
##

# source https://docs.openappsec.io/integrations/nginx-proxy-manager/deploy-nginx-proxy-manager-with-open-appsec-managed-from-npm-webui#prerequisites

# uncomment standalone containers if using standalone compose profile


services:

##############_____________APPSEC_AGENT_____________##############

  appsec-agent:
    image: ghcr.io/openappsec/agent:latest
    container_name: appsec-agent
    ipc: host
    network_mode: service:appsec-nginx-proxy-manager
    restart: unless-stopped
    environment:
      - SHARED_STORAGE_HOST=appsec-shared-storage
      - LEARNING_HOST=appsec-smartsync
      - TUNING_HOST=appsec-tuning-svc
      #- https_proxy=${APPSEC_HTTPS_PROXY}
      - user_email=${APPSEC_USER_EMAIL}
      - AGENT_TOKEN=${APPSEC_AGENT_TOKEN}
      - autoPolicyLoad=true
      - nginxproxymanager=true
    volumes:
      - ./appsec-config:/etc/cp/conf
      - ./appsec-data:/etc/cp/data
      - ./appsec-logs:/var/log/nano_agent
      - ./appsec-localconfig:/ext/appsec
    command: /cp-nano-agent

##############_____________NGINXPM_APSVER____________#############

  appsec-nginx-proxy-manager:
    container_name: appsec-nginx-proxy-manager
    image: ghcr.io/openappsec/nginx-proxy-manager-attachment:latest
    ipc: host
    restart: unless-stopped
    networks:
      - npm
      - internal_network
    ports:
      - 80:80 # Public HTTP Port
      - 443:443 # Public HTTPS Port
      - 81:81 # Admin Web Port
    volumes:
      - ./npm-data:/data
      - ./npm-letsencrypt:/etc/letsencrypt
      - ./appsec-logs:/ext/appsec-logs
      - ./appsec-localconfig:/ext/appsec

##############_____Authentik_Postgresql_____###########################

  auth-postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: authentik-postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - auth-database:/var/lib/postgresql/data
    networks:
      - internal_network
    environment:
      # Set in .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Set in .env
      POSTGRES_USER: ${POSTGRES_USER}
      # Set in .env
      POSTGRES_DB: ${POSTGRES_DB}

##############_____Authentik_Redis_____################################

  auth-redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    networks:
      - internal_network
    volumes:
      - auth-redis:/data

##############_____Authentik_Server_____###############################

  server:
    # Check Authentik Docs for recommended pinned version
    image: ghcr.io/goauthentik/server:2025.4.1
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      # Set in .env
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_POSTGRESQL__HOST: auth-postgresql
      # Set in .env
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      # Set in .env
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      # Set in .env
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
    volumes:
      - ./authentik-media:/media
      - ./authentik-custom-templates:/templates
    networks:
      npm:
      internal_network:
# Leave ports unpublished, access through reverse proxy. Use the commented-out ports for reference. Use 9000 for outpost.
### ports:
   #   - "9000:9000"
   #   - "9443:9443"
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy

##############_____Authentik_worker_____###############################

  worker:
    # USE THE SAME IMAGE AS SERVER!!!
    image: ghcr.io/goauthentik/server:2025.4.1
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      # Set in .env
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_POSTGRESQL__HOST: auth-postgresql
      # Set in .env
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      # Set in .env
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      # Set in .env
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./authentik-media:/media
      - ./authentik-certs:/certs
      - ./authentik-custom-templates:/templates
    networks:
      internal_network:
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy

##############__SERVICES_BEHIND_PROXY(internal_network)__#########

# These are the protected services hidden behind the proxy, make sure all of them are on the internal_network, and ports are NOT published!

# Our test container
  hello:
    image: nginxdemos/hello
    container_name: hello-test
    networks:
      - internal_network
    restart: unless-stopped

  # Your services go here.

##############_____________VOLUMES_N_NETWORKS________#############

volumes:
# authentik postgresql
  auth-database:
    driver: local
# authentik redis
  auth-redis:
    driver: local

networks:
  npm:
    driver: bridge
# Our internal network - use for services you want to protect
  internal_network:
    name: internal_network
    driver: bridge

##############_____________APPSEC_SSYNC_____________##############
##############____NOT_DEPLOYED_UNLESS_STANDALONE____##############
#
#  appsec-smartsync:
#    profiles:
#      - standalone
#    image: ghcr.io/openappsec/smartsync:latest
#    container_name: appsec-smartsync
#    environment:
#      - SHARED_STORAGE_HOST=appsec-shared-storage
#    restart: unless-stopped
#    depends_on:
#      - appsec-shared-storage
#
##############_____________APPSEC_SSTOR_____________##############
##############____NOT_DEPLOYED_UNLESS_STANDALONE____##############
#
#  appsec-shared-storage:
#    profiles:
#      - standalone
#    image: ghcr.io/openappsec/smartsync-shared-files:latest
#    container_name: appsec-shared-storage
#    ipc: host
#    restart: unless-stopped
#    # if you do not want to run this container as "root" user you can comment it out and instead run the below command after the deployment
#    # docker exec -u root appsec-shared-storage chown -R appuser:appuser /db
#    user: root
#    volumes:
#      - ./appsec-smartsync-storage:/db:z
#
##############_____________APPSEC_TUNING____________##############
##############____NOT_DEPLOYED_UNLESS_STANDALONE____##############
#
#  appsec-tuning-svc:
#    profiles:
#      - standalone
#    image: ghcr.io/openappsec/smartsync-tuning:latest
#    container_name: appsec-tuning-svc
#    environment:
#      - SHARED_STORAGE_HOST=appsec-shared-storage
#      - QUERY_DB_PASSWORD=${APPSEC_DB_PASSWORD}
#      - QUERY_DB_HOST=${APPSEC_DB_HOST}
#      - QUERY_DB_USER=${APPSEC_DB_USER}
#      # only relevant when deploying own DB 
#      #- SSLMODE:
#    restart: unless-stopped
#    volumes:
#      - ./appsec-config:/etc/cp/conf
#    depends_on:
#      - appsec-shared-storage
#      - appsec-db

##############_____________APPSEC_POSTGRES__________##############
##############____NOT_DEPLOYED_UNLESS_STANDALONE____##############
#      
#  appsec-db:
#    profiles:
#      - standalone
#    image: postgres
#    container_name: appsec-db
#    restart: unless-stopped
#    environment:
#      - POSTGRES_PASSWORD=${APPSEC_DB_PASSWORD}
#      - POSTGRES_USER=${APPSEC_DB_USER} 
#    volumes:
#      - ./appsec-postgres-data:/var/lib/postgresql/data
